Create a new deployment web-003, scale this deployment to 3 replicas, make sure desired number of pods are always running.


deploy a web-load-5461 pod using nginx:1.17 with the label set to tier=web


Expose "audit-web-app" pod to by creating a service "audit-web-app-service" on port 30002 on nodes of given cluster.



***********************************************************************************************************************************************************************


deploy a simple application consisting of a main container and a sidecar container. The main container is a basic web server that generates a timestamped "hello world" message every 5 seconds and writes it to a file. The sidecar container is a log processor that reads this file and prints its contents to standard output. Both containers must share the same file using a directory on the host node.

Requirements:

Pod Configuration:

Create a Pod named my-multicontainer-app.

The Pod should have two containers: web-generator and log-reader.

The Pod must have a shared volume named shared-data-volume.

hostPath Volume:

The shared-data-volume must be a hostPath volume.

It should point to a directory on the host machine at /tmp/app-data.

The hostPath volume must be configured with a type of DirectoryOrCreate to ensure the directory is created if it doesn't already exist on the host.

Container Configuration:

web-generator Container:

Use the alpine image.

The container's command should be a shell script that continuously echoes the current timestamp and a message to a file named output.log within the /data directory inside the container. An example command would be sh -c 'while true; do echo "$(date): Hello from the web-generator!" >> /data/output.log; sleep 5; done'.

Mount the shared-data-volume to the /data directory inside this container.

log-reader Container:

Use the alpine image.

The container's command should be tail -f /data/output.log to continuously read the file as it's being written.

Mount the shared-data-volume to the /data directory inside this container.



***********************************************************************************************************************************************************************************************************

Create a persistent volume with given specifications:
  Volume Name - pv-rnd
  storage - 100Mi
  Access modes - ReadWriteMany
  host path - /pv/host-data-rnd
 

*************************************************************************************************************************************************************************************************

Craete a PersistentVolume, PersistentVolumeClaim and Pod with below specifications

  PV - name : mypvl , Size: 100Mi, AccessModes: ReadWritemany, Hostpath: /pv/log, Reclaim Policy: Retain
  PVC - name:  pv-claim-l, Storage request: 50Mi, Access Modes: ReadWritemany 
  Pod - name : my-nginx-pod, image Name: nginx, Volume: PersistentVolumeClaim: pv-claim-l, volume mount : /log
   
*************************************************************************************************************************************************************************************************


We have worker 3 nodes in our cluster, create a DaemonSet (name prod-pod, image=nginx) on each node except worker node8.
 

*************************************************************************************************************************************************************************************************

Create a Pod named nginx in the namespace h92. Its container should run the container image nginx:1.21.6.
Define a Volume of type emptyDir named nginx-run which mounts the path /var/run to the container.
Define a Volume of type emptyDir named nginx-cache which mounts the path /var/cache/nginx to the container.
Define a Volume of type emptyDir named nginx-data which mounts the path /usr/local/nginx to the container.
(Optional) Say you would want to ensure the nginx can only write to those Volume mount paths but not the container's temporary file system. How do you prevent this from being allowed?


*************************************************************************************************************************************************************************************************

Create a PersistentVolume named pv, access mode ReadWriteMany, 512Mi of storage capacity and the host path /data/config.
Create a PersistentVolumeClaim named pvc. The claim should request 256Mi and use an empty string value for the storage class. Ensure that the PersistentVolumeClaim is properly bound after its creation.
Mount the PersistentVolumeClaim from a new Pod named app with the path /var/app/config. The Pod uses the image nginx:1.21.6.
Open an interactive shell to the Pod and create a file in the directory /var/app/config.

*************************************************************************************************************************************************************************************************

Create three different Pods with the names frontend, backend and database that use the image nginx:1.25.5-alpine. For convenience, you can use the file pods.yaml to create the Pods.
Declare labels for those Pods, as follows:

	frontend: env=prod, team=shiny
	backend: env=prod, team=legacy, app=v1.2.4
	database: env=prod, team=storage

Declare annotations for those Pods, as follows:
	
	frontend: contact=John Doe, commit=2d3mg3
	backend: contact=Mary Harris

Render the list of all Pods and their labels.
Use label selectors on the command line to query for all production Pods that belong to the teams shiny and legacy.
Remove the label env from the backend Pod and rerun the selection.
Render the surrounding 3 lines of YAML of all Pods that have annotations.


*************************************************************************************************************************************************************************************************
